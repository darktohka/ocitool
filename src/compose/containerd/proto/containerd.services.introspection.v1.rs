// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plugin {
    /// Type defines the type of plugin.
    ///
    /// See package plugin for a list of possible values. Non core plugins may
    /// define their own values during registration.
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    /// ID identifies the plugin uniquely in the system.
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    /// Requires lists the plugin types required by this plugin.
    #[prost(string, repeated, tag = "3")]
    pub requires: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Platforms enumerates the platforms this plugin will support.
    ///
    /// If values are provided here, the plugin will only be operable under the
    /// provided platforms.
    ///
    /// If this is empty, the plugin will work across all platforms.
    ///
    /// If the plugin prefers certain platforms over others, they should be
    /// listed from most to least preferred.
    #[prost(message, repeated, tag = "4")]
    pub platforms: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Platform>,
    /// Exports allows plugins to provide values about state or configuration to
    /// interested parties.
    ///
    /// One example is exposing the configured path of a snapshotter plugin.
    #[prost(map = "string, string", tag = "5")]
    pub exports: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Capabilities allows plugins to communicate feature switches to allow
    /// clients to detect features that may not be on be default or may be
    /// different from version to version.
    ///
    /// Use this sparingly.
    #[prost(string, repeated, tag = "6")]
    pub capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// InitErr will be set if the plugin fails initialization.
    ///
    /// This means the plugin may have been registered but a non-terminal error
    /// was encountered during initialization.
    ///
    /// Plugins that have this value set cannot be used.
    #[prost(message, optional, tag = "7")]
    pub init_err: ::core::option::Option<
        crate::compose::containerd::client::google::rpc::Status,
    >,
}
impl ::prost::Name for Plugin {
    const NAME: &'static str = "Plugin";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.Plugin".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.Plugin".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginsRequest {
    /// Filters contains one or more filters using the syntax defined in the
    /// containerd filter package.
    ///
    /// The returned result will be those that match any of the provided
    /// filters. Expanded, plugins that match the following will be
    /// returned:
    ///
    
            /// ```notrust
            /// 	filters[0] or filters[1] or ... or filters[n-1] or filters[n]
            /// ```
    ///
    /// If filters is zero-length or nil, all items will be returned.
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for PluginsRequest {
    const NAME: &'static str = "PluginsRequest";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.PluginsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.PluginsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginsResponse {
    #[prost(message, repeated, tag = "1")]
    pub plugins: ::prost::alloc::vec::Vec<Plugin>,
}
impl ::prost::Name for PluginsResponse {
    const NAME: &'static str = "PluginsResponse";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.PluginsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.PluginsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerResponse {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pid: u64,
    /// PID namespace, such as 4026531836
    #[prost(uint64, tag = "3")]
    pub pidns: u64,
    #[prost(message, repeated, tag = "4")]
    pub deprecations: ::prost::alloc::vec::Vec<DeprecationWarning>,
}
impl ::prost::Name for ServerResponse {
    const NAME: &'static str = "ServerResponse";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.ServerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.ServerResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeprecationWarning {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub last_occurrence: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for DeprecationWarning {
    const NAME: &'static str = "DeprecationWarning";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.DeprecationWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.DeprecationWarning".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginInfoRequest {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    /// Options may be used to request extra dynamic information from
    /// a plugin.
    /// This object is determined by the plugin and the plugin may return
    /// NotImplemented or InvalidArgument if it is not supported
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for PluginInfoRequest {
    const NAME: &'static str = "PluginInfoRequest";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.PluginInfoRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.PluginInfoRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginInfoResponse {
    #[prost(message, optional, tag = "1")]
    pub plugin: ::core::option::Option<Plugin>,
    #[prost(message, optional, tag = "2")]
    pub extra: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for PluginInfoResponse {
    const NAME: &'static str = "PluginInfoResponse";
    const PACKAGE: &'static str = "containerd.services.introspection.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.introspection.v1.PluginInfoResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.introspection.v1.PluginInfoResponse".into()
    }
}
/// Generated client implementations.
pub mod introspection_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct IntrospectionClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl IntrospectionClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> IntrospectionClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> IntrospectionClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            IntrospectionClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Plugins returns a list of plugins in containerd.
        ///
        /// Clients can use this to detect features and capabilities when using
        /// containerd.
        pub async fn plugins(
            &mut self,
            request: impl tonic::IntoRequest<super::PluginsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PluginsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.introspection.v1.Introspection/Plugins",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.introspection.v1.Introspection",
                        "Plugins",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Server returns information about the containerd server
        pub async fn server(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<super::ServerResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.introspection.v1.Introspection/Server",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.introspection.v1.Introspection",
                        "Server",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// PluginInfo returns information directly from a plugin if the plugin supports it
        pub async fn plugin_info(
            &mut self,
            request: impl tonic::IntoRequest<super::PluginInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PluginInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.introspection.v1.Introspection/PluginInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.introspection.v1.Introspection",
                        "PluginInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
