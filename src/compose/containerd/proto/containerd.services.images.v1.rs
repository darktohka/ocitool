// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Image {
    /// Name provides a unique name for the image.
    ///
    /// Containerd treats this as the primary identifier.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Labels provides free form labels for the image. These are runtime only
    /// and do not get inherited into the package image in any way.
    ///
    /// Labels may be updated using the field mask.
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Target describes the content entry point of the image.
    #[prost(message, optional, tag = "3")]
    pub target: ::core::option::Option<crate::compose::containerd::client::types::Descriptor>,
    /// CreatedAt is the time the image was first created.
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// UpdatedAt is the last time the image was mutated.
    #[prost(message, optional, tag = "8")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for Image {
    const NAME: &'static str = "Image";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.Image".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.Image".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetImageRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for GetImageRequest {
    const NAME: &'static str = "GetImageRequest";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.GetImageRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.GetImageRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetImageResponse {
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
}
impl ::prost::Name for GetImageResponse {
    const NAME: &'static str = "GetImageResponse";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.GetImageResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.GetImageResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateImageRequest {
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
    #[prost(message, optional, tag = "2")]
    pub source_date_epoch: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for CreateImageRequest {
    const NAME: &'static str = "CreateImageRequest";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.CreateImageRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.CreateImageRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateImageResponse {
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
}
impl ::prost::Name for CreateImageResponse {
    const NAME: &'static str = "CreateImageResponse";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.CreateImageResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.CreateImageResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateImageRequest {
    /// Image provides a full or partial image for update.
    ///
    /// The name field must be set or an error will be returned.
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
    /// UpdateMask specifies which fields to perform the update on. If empty,
    /// the operation applies to all fields.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    #[prost(message, optional, tag = "3")]
    pub source_date_epoch: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for UpdateImageRequest {
    const NAME: &'static str = "UpdateImageRequest";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.UpdateImageRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.UpdateImageRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateImageResponse {
    #[prost(message, optional, tag = "1")]
    pub image: ::core::option::Option<Image>,
}
impl ::prost::Name for UpdateImageResponse {
    const NAME: &'static str = "UpdateImageResponse";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.UpdateImageResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.UpdateImageResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListImagesRequest {
    /// Filters contains one or more filters using the syntax defined in the
    /// containerd filter package.
    ///
    /// The returned result will be those that match any of the provided
    /// filters. Expanded, images that match the following will be
    /// returned:
    ///
    
            /// ```notrust
            /// 	filters[0] or filters[1] or ... or filters[n-1] or filters[n]
            /// ```
    ///
    /// If filters is zero-length or nil, all items will be returned.
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ListImagesRequest {
    const NAME: &'static str = "ListImagesRequest";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.ListImagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.ListImagesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListImagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub images: ::prost::alloc::vec::Vec<Image>,
}
impl ::prost::Name for ListImagesResponse {
    const NAME: &'static str = "ListImagesResponse";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.ListImagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.ListImagesResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteImageRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Sync indicates that the delete and cleanup should be done
    /// synchronously before returning to the caller
    ///
    /// Default is false
    #[prost(bool, tag = "2")]
    pub sync: bool,
    /// Target value for image to be deleted
    ///
    /// If image descriptor does not match the same digest,
    /// the delete operation will return "not found" error.
    #[prost(message, optional, tag = "3")]
    pub target: ::core::option::Option<crate::compose::containerd::client::types::Descriptor>,
}
impl ::prost::Name for DeleteImageRequest {
    const NAME: &'static str = "DeleteImageRequest";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.DeleteImageRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.DeleteImageRequest".into()
    }
}
/// Generated client implementations.
pub mod images_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Images is a service that allows one to register images with containerd.
    ///
    /// In containerd, an image is merely the mapping of a name to a content root,
    /// described by a descriptor. The behavior and state of image is purely
    /// dictated by the type of the descriptor.
    ///
    /// From the perspective of this service, these references are mostly shallow,
    /// in that the existence of the required content won't be validated until
    /// required by consuming services.
    ///
    /// As such, this can really be considered a "metadata service".
    #[derive(Debug, Clone)]
    pub struct ImagesClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ImagesClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ImagesClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ImagesClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ImagesClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Get returns an image by name.
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetImageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetImageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.images.v1.Images/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.images.v1.Images", "Get"));
            self.inner.unary(req, path, codec).await
        }
        /// List returns a list of all images known to containerd.
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListImagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListImagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.images.v1.Images/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.images.v1.Images", "List"));
            self.inner.unary(req, path, codec).await
        }
        /// Create an image record in the metadata store.
        ///
        /// The name of the image must be unique.
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateImageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateImageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.images.v1.Images/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.images.v1.Images", "Create"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Update assigns the name to a given target image based on the provided
        /// image.
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateImageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateImageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.images.v1.Images/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.images.v1.Images", "Update"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Delete deletes the image by name.
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteImageRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.images.v1.Images/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.images.v1.Images", "Delete"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageCreate {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ImageCreate {
    const NAME: &'static str = "ImageCreate";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.ImageCreate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.ImageCreate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageUpdate {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ImageUpdate {
    const NAME: &'static str = "ImageUpdate";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.ImageUpdate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.ImageUpdate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageDelete {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for ImageDelete {
    const NAME: &'static str = "ImageDelete";
    const PACKAGE: &'static str = "containerd.services.images.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.images.v1.ImageDelete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.images.v1.ImageDelete".into()
    }
}
