// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Process {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub pid: u32,
    #[prost(enumeration = "Status", tag = "4")]
    pub status: i32,
    #[prost(string, tag = "5")]
    pub stdin: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub stdout: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub stderr: ::prost::alloc::string::String,
    #[prost(bool, tag = "8")]
    pub terminal: bool,
    #[prost(uint32, tag = "9")]
    pub exit_status: u32,
    #[prost(message, optional, tag = "10")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for Process {
    const NAME: &'static str = "Process";
    const PACKAGE: &'static str = "containerd.v1.types";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.v1.types.Process".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.v1.types.Process".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessInfo {
    /// PID is the process ID.
    #[prost(uint32, tag = "1")]
    pub pid: u32,
    /// Info contains additional process information.
    ///
    /// Info varies by platform.
    #[prost(message, optional, tag = "2")]
    pub info: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for ProcessInfo {
    const NAME: &'static str = "ProcessInfo";
    const PACKAGE: &'static str = "containerd.v1.types";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.v1.types.ProcessInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.v1.types.ProcessInfo".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Unknown = 0,
    Created = 1,
    Running = 2,
    Stopped = 3,
    Paused = 4,
    Pausing = 5,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Created => "CREATED",
            Self::Running => "RUNNING",
            Self::Stopped => "STOPPED",
            Self::Paused => "PAUSED",
            Self::Pausing => "PAUSING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "CREATED" => Some(Self::Created),
            "RUNNING" => Some(Self::Running),
            "STOPPED" => Some(Self::Stopped),
            "PAUSED" => Some(Self::Paused),
            "PAUSING" => Some(Self::Pausing),
            _ => None,
        }
    }
}
