// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerCreate {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub image: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub runtime: ::core::option::Option<container_create::Runtime>,
}
/// Nested message and enum types in `ContainerCreate`.
pub mod container_create {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Runtime {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub options: ::core::option::Option<::prost_types::Any>,
    }
    impl ::prost::Name for Runtime {
        const NAME: &'static str = "Runtime";
        const PACKAGE: &'static str = "containerd.events";
        fn full_name() -> ::prost::alloc::string::String {
            "containerd.events.ContainerCreate.Runtime".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/containerd.events.ContainerCreate.Runtime".into()
        }
    }
}
impl ::prost::Name for ContainerCreate {
    const NAME: &'static str = "ContainerCreate";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.ContainerCreate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.ContainerCreate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerUpdate {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub image: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "4")]
    pub snapshot_key: ::prost::alloc::string::String,
}
impl ::prost::Name for ContainerUpdate {
    const NAME: &'static str = "ContainerUpdate";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.ContainerUpdate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.ContainerUpdate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerDelete {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
impl ::prost::Name for ContainerDelete {
    const NAME: &'static str = "ContainerDelete";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.ContainerDelete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.ContainerDelete".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentCreate {
    #[prost(string, tag = "1")]
    pub digest: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub size: i64,
}
impl ::prost::Name for ContentCreate {
    const NAME: &'static str = "ContentCreate";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.ContentCreate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.ContentCreate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentDelete {
    #[prost(string, tag = "1")]
    pub digest: ::prost::alloc::string::String,
}
impl ::prost::Name for ContentDelete {
    const NAME: &'static str = "ContentDelete";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.ContentDelete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.ContentDelete".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamespaceCreate {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for NamespaceCreate {
    const NAME: &'static str = "NamespaceCreate";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.NamespaceCreate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.NamespaceCreate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamespaceUpdate {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for NamespaceUpdate {
    const NAME: &'static str = "NamespaceUpdate";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.NamespaceUpdate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.NamespaceUpdate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamespaceDelete {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for NamespaceDelete {
    const NAME: &'static str = "NamespaceDelete";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.NamespaceDelete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.NamespaceDelete".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnapshotPrepare {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub parent: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub snapshotter: ::prost::alloc::string::String,
}
impl ::prost::Name for SnapshotPrepare {
    const NAME: &'static str = "SnapshotPrepare";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.SnapshotPrepare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.SnapshotPrepare".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnapshotCommit {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub snapshotter: ::prost::alloc::string::String,
}
impl ::prost::Name for SnapshotCommit {
    const NAME: &'static str = "SnapshotCommit";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.SnapshotCommit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.SnapshotCommit".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnapshotRemove {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub snapshotter: ::prost::alloc::string::String,
}
impl ::prost::Name for SnapshotRemove {
    const NAME: &'static str = "SnapshotRemove";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.SnapshotRemove".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.SnapshotRemove".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskCreate {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub bundle: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub rootfs: ::prost::alloc::vec::Vec<super::types::Mount>,
    #[prost(message, optional, tag = "4")]
    pub io: ::core::option::Option<TaskIo>,
    #[prost(string, tag = "5")]
    pub checkpoint: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub pid: u32,
}
impl ::prost::Name for TaskCreate {
    const NAME: &'static str = "TaskCreate";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskCreate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskCreate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskStart {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
}
impl ::prost::Name for TaskStart {
    const NAME: &'static str = "TaskStart";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskStart".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskStart".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskDelete {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
    #[prost(uint32, tag = "3")]
    pub exit_status: u32,
    #[prost(message, optional, tag = "4")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
    /// id is the specific exec. By default if omitted will be `""` thus matches
    /// the init exec of the task matching `container_id`.
    #[prost(string, tag = "5")]
    pub id: ::prost::alloc::string::String,
}
impl ::prost::Name for TaskDelete {
    const NAME: &'static str = "TaskDelete";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskDelete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskDelete".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskIo {
    #[prost(string, tag = "1")]
    pub stdin: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub stdout: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub stderr: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub terminal: bool,
}
impl ::prost::Name for TaskIo {
    const NAME: &'static str = "TaskIO";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskIO".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskIO".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskExit {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub pid: u32,
    #[prost(uint32, tag = "4")]
    pub exit_status: u32,
    #[prost(message, optional, tag = "5")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for TaskExit {
    const NAME: &'static str = "TaskExit";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskExit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskExit".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskOom {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for TaskOom {
    const NAME: &'static str = "TaskOOM";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskOOM".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskOOM".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskExecAdded {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
}
impl ::prost::Name for TaskExecAdded {
    const NAME: &'static str = "TaskExecAdded";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskExecAdded".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskExecAdded".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskExecStarted {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub pid: u32,
}
impl ::prost::Name for TaskExecStarted {
    const NAME: &'static str = "TaskExecStarted";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskExecStarted".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskExecStarted".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskPaused {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for TaskPaused {
    const NAME: &'static str = "TaskPaused";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskPaused".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskPaused".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskResumed {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for TaskResumed {
    const NAME: &'static str = "TaskResumed";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskResumed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskResumed".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskCheckpointed {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub checkpoint: ::prost::alloc::string::String,
}
impl ::prost::Name for TaskCheckpointed {
    const NAME: &'static str = "TaskCheckpointed";
    const PACKAGE: &'static str = "containerd.events";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.events.TaskCheckpointed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.events.TaskCheckpointed".into()
    }
}
