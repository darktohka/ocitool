// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Namespace {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Labels provides an area to include arbitrary data on namespaces.
    ///
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    ///
    /// Note that to add a new value to this field, read the existing set and
    /// include the entire result in the update call.
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for Namespace {
    const NAME: &'static str = "Namespace";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.Namespace".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.Namespace".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNamespaceRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for GetNamespaceRequest {
    const NAME: &'static str = "GetNamespaceRequest";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.GetNamespaceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.GetNamespaceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNamespaceResponse {
    #[prost(message, optional, tag = "1")]
    pub namespace: ::core::option::Option<Namespace>,
}
impl ::prost::Name for GetNamespaceResponse {
    const NAME: &'static str = "GetNamespaceResponse";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.GetNamespaceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.GetNamespaceResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNamespacesRequest {
    #[prost(string, tag = "1")]
    pub filter: ::prost::alloc::string::String,
}
impl ::prost::Name for ListNamespacesRequest {
    const NAME: &'static str = "ListNamespacesRequest";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.ListNamespacesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.ListNamespacesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNamespacesResponse {
    #[prost(message, repeated, tag = "1")]
    pub namespaces: ::prost::alloc::vec::Vec<Namespace>,
}
impl ::prost::Name for ListNamespacesResponse {
    const NAME: &'static str = "ListNamespacesResponse";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.ListNamespacesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.ListNamespacesResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateNamespaceRequest {
    #[prost(message, optional, tag = "1")]
    pub namespace: ::core::option::Option<Namespace>,
}
impl ::prost::Name for CreateNamespaceRequest {
    const NAME: &'static str = "CreateNamespaceRequest";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.CreateNamespaceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.CreateNamespaceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateNamespaceResponse {
    #[prost(message, optional, tag = "1")]
    pub namespace: ::core::option::Option<Namespace>,
}
impl ::prost::Name for CreateNamespaceResponse {
    const NAME: &'static str = "CreateNamespaceResponse";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.CreateNamespaceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.CreateNamespaceResponse".into()
    }
}
/// UpdateNamespaceRequest updates the metadata for a namespace.
///
/// The operation should follow semantics described in
/// <https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/field-mask,>
/// unless otherwise qualified.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateNamespaceRequest {
    /// Namespace provides the target value, as declared by the mask, for the update.
    ///
    /// The namespace field must be set.
    #[prost(message, optional, tag = "1")]
    pub namespace: ::core::option::Option<Namespace>,
    /// UpdateMask specifies which fields to perform the update on. If empty,
    /// the operation applies to all fields.
    ///
    /// For the most part, this applies only to selectively updating labels on
    /// the namespace. While field masks are typically limited to ascii alphas
    /// and digits, we just take everything after the "labels." as the map key.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
impl ::prost::Name for UpdateNamespaceRequest {
    const NAME: &'static str = "UpdateNamespaceRequest";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.UpdateNamespaceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.UpdateNamespaceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateNamespaceResponse {
    #[prost(message, optional, tag = "1")]
    pub namespace: ::core::option::Option<Namespace>,
}
impl ::prost::Name for UpdateNamespaceResponse {
    const NAME: &'static str = "UpdateNamespaceResponse";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.UpdateNamespaceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.UpdateNamespaceResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteNamespaceRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for DeleteNamespaceRequest {
    const NAME: &'static str = "DeleteNamespaceRequest";
    const PACKAGE: &'static str = "containerd.services.namespaces.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.namespaces.v1.DeleteNamespaceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.namespaces.v1.DeleteNamespaceRequest".into()
    }
}
/// Generated client implementations.
pub mod namespaces_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Namespaces provides the ability to manipulate containerd namespaces.
    ///
    /// All objects in the system are required to be a member of a namespace. If a
    /// namespace is deleted, all objects, including containers, images and
    /// snapshots, will be deleted, as well.
    ///
    /// Unless otherwise noted, operations in containerd apply only to the namespace
    /// supplied per request.
    ///
    /// I hope this goes without saying, but namespaces are themselves NOT
    /// namespaced.
    #[derive(Debug, Clone)]
    pub struct NamespacesClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NamespacesClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NamespacesClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NamespacesClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NamespacesClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNamespaceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNamespaceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.namespaces.v1.Namespaces/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.namespaces.v1.Namespaces",
                        "Get",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListNamespacesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListNamespacesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.namespaces.v1.Namespaces/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.namespaces.v1.Namespaces",
                        "List",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateNamespaceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateNamespaceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.namespaces.v1.Namespaces/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.namespaces.v1.Namespaces",
                        "Create",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateNamespaceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateNamespaceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.namespaces.v1.Namespaces/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.namespaces.v1.Namespaces",
                        "Update",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteNamespaceRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.namespaces.v1.Namespaces/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.namespaces.v1.Namespaces",
                        "Delete",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
