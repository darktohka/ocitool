// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreCreateRequest {
    #[prost(message, optional, tag = "1")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
}
impl ::prost::Name for StoreCreateRequest {
    const NAME: &'static str = "StoreCreateRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreCreateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreCreateRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreCreateResponse {
    #[prost(message, optional, tag = "1")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
}
impl ::prost::Name for StoreCreateResponse {
    const NAME: &'static str = "StoreCreateResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreCreateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreCreateResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreUpdateRequest {
    #[prost(message, optional, tag = "1")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
    #[prost(string, repeated, tag = "2")]
    pub fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for StoreUpdateRequest {
    const NAME: &'static str = "StoreUpdateRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreUpdateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreUpdateRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreUpdateResponse {
    #[prost(message, optional, tag = "1")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
}
impl ::prost::Name for StoreUpdateResponse {
    const NAME: &'static str = "StoreUpdateResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreUpdateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreUpdateResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreDeleteRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
}
impl ::prost::Name for StoreDeleteRequest {
    const NAME: &'static str = "StoreDeleteRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreDeleteRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreDeleteRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoreDeleteResponse {}
impl ::prost::Name for StoreDeleteResponse {
    const NAME: &'static str = "StoreDeleteResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreDeleteResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreDeleteResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreListRequest {
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for StoreListRequest {
    const NAME: &'static str = "StoreListRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreListRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreListRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreListResponse {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Sandbox>,
}
impl ::prost::Name for StoreListResponse {
    const NAME: &'static str = "StoreListResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreListResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreListResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreGetRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
}
impl ::prost::Name for StoreGetRequest {
    const NAME: &'static str = "StoreGetRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreGetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreGetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreGetResponse {
    #[prost(message, optional, tag = "1")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
}
impl ::prost::Name for StoreGetResponse {
    const NAME: &'static str = "StoreGetResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.StoreGetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.StoreGetResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerCreateRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub rootfs: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<::prost_types::Any>,
    #[prost(string, tag = "4")]
    pub netns_path: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "5")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "6")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerCreateRequest {
    const NAME: &'static str = "ControllerCreateRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerCreateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerCreateRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerCreateResponse {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerCreateResponse {
    const NAME: &'static str = "ControllerCreateResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerCreateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerCreateResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerStartRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerStartRequest {
    const NAME: &'static str = "ControllerStartRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerStartRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerStartRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerStartResponse {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
    #[prost(message, optional, tag = "3")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Address of the sandbox for containerd to connect,
    /// for calling Task or other APIs serving in the sandbox.
    /// it is in the form of ttrpc+unix://path/to/uds or grpc+vsock://<vsock cid>:<port>.
    #[prost(string, tag = "5")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub version: u32,
}
impl ::prost::Name for ControllerStartResponse {
    const NAME: &'static str = "ControllerStartResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerStartResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerStartResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerPlatformRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerPlatformRequest {
    const NAME: &'static str = "ControllerPlatformRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerPlatformRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerPlatformRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerPlatformResponse {
    #[prost(message, optional, tag = "1")]
    pub platform: ::core::option::Option<crate::compose::containerd::client::types::Platform>,
}
impl ::prost::Name for ControllerPlatformResponse {
    const NAME: &'static str = "ControllerPlatformResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerPlatformResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerPlatformResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerStopRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub timeout_secs: u32,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerStopRequest {
    const NAME: &'static str = "ControllerStopRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerStopRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerStopRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ControllerStopResponse {}
impl ::prost::Name for ControllerStopResponse {
    const NAME: &'static str = "ControllerStopResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerStopResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerStopResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerWaitRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerWaitRequest {
    const NAME: &'static str = "ControllerWaitRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerWaitRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerWaitRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ControllerWaitResponse {
    #[prost(uint32, tag = "1")]
    pub exit_status: u32,
    #[prost(message, optional, tag = "2")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for ControllerWaitResponse {
    const NAME: &'static str = "ControllerWaitResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerWaitResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerWaitResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerStatusRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub verbose: bool,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerStatusRequest {
    const NAME: &'static str = "ControllerStatusRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerStatusRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerStatusRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerStatusResponse {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
    #[prost(string, tag = "3")]
    pub state: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "4")]
    pub info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "5")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub extra: ::core::option::Option<::prost_types::Any>,
    /// Address of the sandbox for containerd to connect,
    /// for calling Task or other APIs serving in the sandbox.
    /// it is in the form of ttrpc+unix://path/to/uds or grpc+vsock://<vsock cid>:<port>.
    #[prost(string, tag = "8")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub version: u32,
}
impl ::prost::Name for ControllerStatusResponse {
    const NAME: &'static str = "ControllerStatusResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerStatusResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerStatusResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerShutdownRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerShutdownRequest {
    const NAME: &'static str = "ControllerShutdownRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerShutdownRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerShutdownRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ControllerShutdownResponse {}
impl ::prost::Name for ControllerShutdownResponse {
    const NAME: &'static str = "ControllerShutdownResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerShutdownResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerShutdownResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerMetricsRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub sandboxer: ::prost::alloc::string::String,
}
impl ::prost::Name for ControllerMetricsRequest {
    const NAME: &'static str = "ControllerMetricsRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerMetricsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerMetricsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerMetricsResponse {
    #[prost(message, optional, tag = "1")]
    pub metrics: ::core::option::Option<crate::compose::containerd::client::types::Metric>,
}
impl ::prost::Name for ControllerMetricsResponse {
    const NAME: &'static str = "ControllerMetricsResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerMetricsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerMetricsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControllerUpdateRequest {
    #[prost(string, tag = "1")]
    pub sandbox_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub sandboxer: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub sandbox: ::core::option::Option<crate::compose::containerd::client::types::Sandbox>,
    #[prost(string, repeated, tag = "4")]
    pub fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ControllerUpdateRequest {
    const NAME: &'static str = "ControllerUpdateRequest";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerUpdateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerUpdateRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ControllerUpdateResponse {}
impl ::prost::Name for ControllerUpdateResponse {
    const NAME: &'static str = "ControllerUpdateResponse";
    const PACKAGE: &'static str = "containerd.services.sandbox.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.sandbox.v1.ControllerUpdateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.sandbox.v1.ControllerUpdateResponse".into()
    }
}
/// Generated client implementations.
pub mod store_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Store provides a metadata storage interface for sandboxes. Similarly to `Containers`,
    /// sandbox object includes info required to start a new instance, but no runtime state.
    /// When running a new sandbox instance, store objects are used as base type to create from.
    #[derive(Debug, Clone)]
    pub struct StoreClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StoreClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StoreClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StoreClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StoreClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreCreateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreCreateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Store/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.sandbox.v1.Store", "Create"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreUpdateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Store/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.sandbox.v1.Store", "Update"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreDeleteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreDeleteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Store/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.sandbox.v1.Store", "Delete"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Store/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.sandbox.v1.Store", "List"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreGetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreGetResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Store/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.sandbox.v1.Store", "Get"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod controller_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Controller is an interface to manage runtime sandbox instances.
    #[derive(Debug, Clone)]
    pub struct ControllerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ControllerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ControllerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ControllerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ControllerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerCreateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerCreateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.sandbox.v1.Controller",
                        "Create",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn start(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerStartRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerStartResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Start",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.sandbox.v1.Controller", "Start"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn platform(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerPlatformRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerPlatformResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Platform",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.sandbox.v1.Controller",
                        "Platform",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn stop(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerStopRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerStopResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Stop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.sandbox.v1.Controller", "Stop"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn wait(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerWaitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerWaitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Wait",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.sandbox.v1.Controller", "Wait"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Status",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.sandbox.v1.Controller",
                        "Status",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn shutdown(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerShutdownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerShutdownResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Shutdown",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.sandbox.v1.Controller",
                        "Shutdown",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerMetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerMetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Metrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.sandbox.v1.Controller",
                        "Metrics",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::ControllerUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ControllerUpdateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.sandbox.v1.Controller/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.sandbox.v1.Controller",
                        "Update",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
