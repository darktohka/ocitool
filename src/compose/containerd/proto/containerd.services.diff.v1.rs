// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyRequest {
    /// Diff is the descriptor of the diff to be extracted
    #[prost(message, optional, tag = "1")]
    pub diff: ::core::option::Option<crate::compose::containerd::client::types::Descriptor>,
    #[prost(message, repeated, tag = "2")]
    pub mounts: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
    #[prost(map = "string, message", tag = "3")]
    pub payloads: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost_types::Any,
    >,
    /// SyncFs is to synchronize the underlying filesystem containing files.
    #[prost(bool, tag = "4")]
    pub sync_fs: bool,
}
impl ::prost::Name for ApplyRequest {
    const NAME: &'static str = "ApplyRequest";
    const PACKAGE: &'static str = "containerd.services.diff.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.diff.v1.ApplyRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.diff.v1.ApplyRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyResponse {
    /// Applied is the descriptor for the object which was applied.
    /// If the input was a compressed blob then the result will be
    /// the descriptor for the uncompressed blob.
    #[prost(message, optional, tag = "1")]
    pub applied: ::core::option::Option<crate::compose::containerd::client::types::Descriptor>,
}
impl ::prost::Name for ApplyResponse {
    const NAME: &'static str = "ApplyResponse";
    const PACKAGE: &'static str = "containerd.services.diff.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.diff.v1.ApplyResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.diff.v1.ApplyResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiffRequest {
    /// Left are the mounts which represent the older copy
    /// in which is the base of the computed changes.
    #[prost(message, repeated, tag = "1")]
    pub left: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
    /// Right are the mounts which represents the newer copy
    /// in which changes from the left were made into.
    #[prost(message, repeated, tag = "2")]
    pub right: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
    /// MediaType is the media type descriptor for the created diff
    /// object
    #[prost(string, tag = "3")]
    pub media_type: ::prost::alloc::string::String,
    /// Ref identifies the pre-commit content store object. This
    /// reference can be used to get the status from the content store.
    #[prost(string, tag = "4")]
    pub r#ref: ::prost::alloc::string::String,
    /// Labels are the labels to apply to the generated content
    /// on content store commit.
    #[prost(map = "string, string", tag = "5")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// SourceDateEpoch specifies the timestamp used to provide control for reproducibility.
    /// See also <https://reproducible-builds.org/docs/source-date-epoch/> .
    ///
    /// Since containerd v2.0, the whiteout timestamps are set to zero (1970-01-01),
    /// not to the source date epoch.
    #[prost(message, optional, tag = "6")]
    pub source_date_epoch: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for DiffRequest {
    const NAME: &'static str = "DiffRequest";
    const PACKAGE: &'static str = "containerd.services.diff.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.diff.v1.DiffRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.diff.v1.DiffRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiffResponse {
    /// Diff is the descriptor of the diff which can be applied
    #[prost(message, optional, tag = "3")]
    pub diff: ::core::option::Option<crate::compose::containerd::client::types::Descriptor>,
}
impl ::prost::Name for DiffResponse {
    const NAME: &'static str = "DiffResponse";
    const PACKAGE: &'static str = "containerd.services.diff.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.diff.v1.DiffResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.diff.v1.DiffResponse".into()
    }
}
/// Generated client implementations.
pub mod diff_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Diff service creates and applies diffs
    #[derive(Debug, Clone)]
    pub struct DiffClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DiffClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DiffClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DiffClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DiffClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Apply applies the content associated with the provided digests onto
        /// the provided mounts. Archive content will be extracted and
        /// decompressed if necessary.
        pub async fn apply(
            &mut self,
            request: impl tonic::IntoRequest<super::ApplyRequest>,
        ) -> std::result::Result<tonic::Response<super::ApplyResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.diff.v1.Diff/Apply",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.diff.v1.Diff", "Apply"));
            self.inner.unary(req, path, codec).await
        }
        /// Diff creates a diff between the given mounts and uploads the result
        /// to the content store.
        pub async fn diff(
            &mut self,
            request: impl tonic::IntoRequest<super::DiffRequest>,
        ) -> std::result::Result<tonic::Response<super::DiffResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.diff.v1.Diff/Diff",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.diff.v1.Diff", "Diff"));
            self.inner.unary(req, path, codec).await
        }
    }
}
