// This file is @generated by prost-build.
/// Lease is an object which retains resources while it exists.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lease {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(map = "string, string", tag = "3")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for Lease {
    const NAME: &'static str = "Lease";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.Lease".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.Lease".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRequest {
    /// ID is used to identity the lease, when the id is not set the service
    /// generates a random identifier for the lease.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for CreateRequest {
    const NAME: &'static str = "CreateRequest";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.CreateRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.CreateRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateResponse {
    #[prost(message, optional, tag = "1")]
    pub lease: ::core::option::Option<Lease>,
}
impl ::prost::Name for CreateResponse {
    const NAME: &'static str = "CreateResponse";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.CreateResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.CreateResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Sync indicates that the delete and cleanup should be done
    /// synchronously before returning to the caller
    ///
    /// Default is false
    #[prost(bool, tag = "2")]
    pub sync: bool,
}
impl ::prost::Name for DeleteRequest {
    const NAME: &'static str = "DeleteRequest";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.DeleteRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.DeleteRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRequest {
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ListRequest {
    const NAME: &'static str = "ListRequest";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.ListRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.ListRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResponse {
    #[prost(message, repeated, tag = "1")]
    pub leases: ::prost::alloc::vec::Vec<Lease>,
}
impl ::prost::Name for ListResponse {
    const NAME: &'static str = "ListResponse";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.ListResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.ListResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// For snapshotter resource, there are many snapshotter types here, like
    /// overlayfs, devmapper etc. The type will be formatted with type,
    /// like "snapshotter/overlayfs".
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
}
impl ::prost::Name for Resource {
    const NAME: &'static str = "Resource";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.Resource".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.Resource".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddResourceRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub resource: ::core::option::Option<Resource>,
}
impl ::prost::Name for AddResourceRequest {
    const NAME: &'static str = "AddResourceRequest";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.AddResourceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.AddResourceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteResourceRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub resource: ::core::option::Option<Resource>,
}
impl ::prost::Name for DeleteResourceRequest {
    const NAME: &'static str = "DeleteResourceRequest";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.DeleteResourceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.DeleteResourceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResourcesRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
impl ::prost::Name for ListResourcesRequest {
    const NAME: &'static str = "ListResourcesRequest";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.ListResourcesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.ListResourcesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResourcesResponse {
    #[prost(message, repeated, tag = "1")]
    pub resources: ::prost::alloc::vec::Vec<Resource>,
}
impl ::prost::Name for ListResourcesResponse {
    const NAME: &'static str = "ListResourcesResponse";
    const PACKAGE: &'static str = "containerd.services.leases.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.leases.v1.ListResourcesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.leases.v1.ListResourcesResponse".into()
    }
}
/// Generated client implementations.
pub mod leases_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Leases service manages resources leases within the metadata store.
    #[derive(Debug, Clone)]
    pub struct LeasesClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl LeasesClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> LeasesClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> LeasesClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            LeasesClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Create creates a new lease for managing changes to metadata. A lease
        /// can be used to protect objects from being removed.
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.leases.v1.Leases/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.leases.v1.Leases", "Create"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Delete deletes the lease and makes any unreferenced objects created
        /// during the lease eligible for garbage collection if not referenced
        /// or retained by other resources during the lease.
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.leases.v1.Leases/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.leases.v1.Leases", "Delete"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// List lists all active leases, returning the full list of
        /// leases and optionally including the referenced resources.
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.leases.v1.Leases/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.leases.v1.Leases", "List"));
            self.inner.unary(req, path, codec).await
        }
        /// AddResource references the resource by the provided lease.
        pub async fn add_resource(
            &mut self,
            request: impl tonic::IntoRequest<super::AddResourceRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.leases.v1.Leases/AddResource",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.leases.v1.Leases",
                        "AddResource",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DeleteResource dereferences the resource by the provided lease.
        pub async fn delete_resource(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteResourceRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.leases.v1.Leases/DeleteResource",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.leases.v1.Leases",
                        "DeleteResource",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ListResources lists all the resources referenced by the lease.
        pub async fn list_resources(
            &mut self,
            request: impl tonic::IntoRequest<super::ListResourcesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListResourcesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.leases.v1.Leases/ListResources",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.leases.v1.Leases",
                        "ListResources",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
