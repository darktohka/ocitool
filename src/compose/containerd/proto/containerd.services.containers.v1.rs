// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Container {
    /// ID is the user-specified identifier.
    ///
    /// This field may not be updated.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Labels provides an area to include arbitrary data on containers.
    ///
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    ///
    /// Note that to add a new value to this field, read the existing set and
    /// include the entire result in the update call.
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Image contains the reference of the image used to build the
    /// specification and snapshots for running this container.
    ///
    /// If this field is updated, the spec and rootfs needed to updated, as well.
    #[prost(string, tag = "3")]
    pub image: ::prost::alloc::string::String,
    /// Runtime specifies which runtime to use for executing this container.
    #[prost(message, optional, tag = "4")]
    pub runtime: ::core::option::Option<container::Runtime>,
    /// Spec to be used when creating the container. This is runtime specific.
    #[prost(message, optional, tag = "5")]
    pub spec: ::core::option::Option<::prost_types::Any>,
    /// Snapshotter specifies the snapshotter name used for rootfs
    #[prost(string, tag = "6")]
    pub snapshotter: ::prost::alloc::string::String,
    /// SnapshotKey specifies the snapshot key to use for the container's root
    /// filesystem. When starting a task from this container, a caller should
    /// look up the mounts from the snapshot service and include those on the
    /// task create request.
    ///
    /// Snapshots referenced in this field will not be garbage collected.
    ///
    /// This field is set to empty when the rootfs is not a snapshot.
    ///
    /// This field may be updated.
    #[prost(string, tag = "7")]
    pub snapshot_key: ::prost::alloc::string::String,
    /// CreatedAt is the time the container was first created.
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// UpdatedAt is the last time the container was mutated.
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Extensions allow clients to provide zero or more blobs that are directly
    /// associated with the container. One may provide protobuf, json, or other
    /// encoding formats. The primary use of this is to further decorate the
    /// container object with fields that may be specific to a client integration.
    ///
    /// The key portion of this map should identify a "name" for the extension
    /// that should be unique against other extensions. When updating extension
    /// data, one should only update the specified extension using field paths
    /// to select a specific map key.
    #[prost(map = "string, message", tag = "10")]
    pub extensions: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost_types::Any,
    >,
    /// Sandbox ID this container belongs to.
    #[prost(string, tag = "11")]
    pub sandbox: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Container`.
pub mod container {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Runtime {
        /// Name is the name of the runtime.
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        /// Options specify additional runtime initialization options.
        #[prost(message, optional, tag = "2")]
        pub options: ::core::option::Option<::prost_types::Any>,
    }
    impl ::prost::Name for Runtime {
        const NAME: &'static str = "Runtime";
        const PACKAGE: &'static str = "containerd.services.containers.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "containerd.services.containers.v1.Container.Runtime".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/containerd.services.containers.v1.Container.Runtime".into()
        }
    }
}
impl ::prost::Name for Container {
    const NAME: &'static str = "Container";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.Container".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.Container".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
impl ::prost::Name for GetContainerRequest {
    const NAME: &'static str = "GetContainerRequest";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.GetContainerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.GetContainerRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerResponse {
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
impl ::prost::Name for GetContainerResponse {
    const NAME: &'static str = "GetContainerResponse";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.GetContainerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.GetContainerResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainersRequest {
    /// Filters contains one or more filters using the syntax defined in the
    /// containerd filter package.
    ///
    /// The returned result will be those that match any of the provided
    /// filters. Expanded, containers that match the following will be
    /// returned:
    ///
    
            /// ```notrust
            /// 	filters[0] or filters[1] or ... or filters[n-1] or filters[n]
            /// ```
    ///
    /// If filters is zero-length or nil, all items will be returned.
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ListContainersRequest {
    const NAME: &'static str = "ListContainersRequest";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.ListContainersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.ListContainersRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainersResponse {
    #[prost(message, repeated, tag = "1")]
    pub containers: ::prost::alloc::vec::Vec<Container>,
}
impl ::prost::Name for ListContainersResponse {
    const NAME: &'static str = "ListContainersResponse";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.ListContainersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.ListContainersResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateContainerRequest {
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
impl ::prost::Name for CreateContainerRequest {
    const NAME: &'static str = "CreateContainerRequest";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.CreateContainerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.CreateContainerRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateContainerResponse {
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
impl ::prost::Name for CreateContainerResponse {
    const NAME: &'static str = "CreateContainerResponse";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.CreateContainerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.CreateContainerResponse".into()
    }
}
/// UpdateContainerRequest updates the metadata on one or more container.
///
/// The operation should follow semantics described in
/// <https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/field-mask,>
/// unless otherwise qualified.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateContainerRequest {
    /// Container provides the target values, as declared by the mask, for the update.
    ///
    /// The ID field must be set.
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
    /// UpdateMask specifies which fields to perform the update on. If empty,
    /// the operation applies to all fields.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
impl ::prost::Name for UpdateContainerRequest {
    const NAME: &'static str = "UpdateContainerRequest";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.UpdateContainerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.UpdateContainerRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateContainerResponse {
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
impl ::prost::Name for UpdateContainerResponse {
    const NAME: &'static str = "UpdateContainerResponse";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.UpdateContainerResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.UpdateContainerResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteContainerRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
impl ::prost::Name for DeleteContainerRequest {
    const NAME: &'static str = "DeleteContainerRequest";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.DeleteContainerRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.DeleteContainerRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainerMessage {
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
impl ::prost::Name for ListContainerMessage {
    const NAME: &'static str = "ListContainerMessage";
    const PACKAGE: &'static str = "containerd.services.containers.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.containers.v1.ListContainerMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.containers.v1.ListContainerMessage".into()
    }
}
/// Generated client implementations.
pub mod containers_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Containers provides metadata storage for containers used in the execution
    /// service.
    ///
    /// The objects here provide an state-independent view of containers for use in
    /// management and resource pinning. From that perspective, containers do not
    /// have a "state" but rather this is the set of resources that will be
    /// considered in use by the container.
    ///
    /// From the perspective of the execution service, these objects represent the
    /// base parameters for creating a container process.
    ///
    /// In general, when looking to add fields for this type, first ask yourself
    /// whether or not the function of the field has to do with runtime execution or
    /// is invariant of the runtime state of the container. If it has to do with
    /// runtime, or changes as the "container" is started and stops, it probably
    /// doesn't belong on this object.
    #[derive(Debug, Clone)]
    pub struct ContainersClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ContainersClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ContainersClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ContainersClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ContainersClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.containers.v1.Containers/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.containers.v1.Containers",
                        "Get",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListContainersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListContainersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.containers.v1.Containers/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.containers.v1.Containers",
                        "List",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::ListContainersRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ListContainerMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.containers.v1.Containers/ListStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.containers.v1.Containers",
                        "ListStream",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.containers.v1.Containers/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.containers.v1.Containers",
                        "Create",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.containers.v1.Containers/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.containers.v1.Containers",
                        "Update",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteContainerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.containers.v1.Containers/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.containers.v1.Containers",
                        "Delete",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
