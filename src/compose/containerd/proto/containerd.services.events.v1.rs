// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishRequest {
    #[prost(string, tag = "1")]
    pub topic: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub event: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for PublishRequest {
    const NAME: &'static str = "PublishRequest";
    const PACKAGE: &'static str = "containerd.services.events.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.events.v1.PublishRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.events.v1.PublishRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardRequest {
    #[prost(message, optional, tag = "1")]
    pub envelope: ::core::option::Option<crate::compose::containerd::client::types::Envelope>,
}
impl ::prost::Name for ForwardRequest {
    const NAME: &'static str = "ForwardRequest";
    const PACKAGE: &'static str = "containerd.services.events.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.events.v1.ForwardRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.events.v1.ForwardRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for SubscribeRequest {
    const NAME: &'static str = "SubscribeRequest";
    const PACKAGE: &'static str = "containerd.services.events.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.events.v1.SubscribeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.events.v1.SubscribeRequest".into()
    }
}
/// Generated client implementations.
pub mod events_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct EventsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl EventsClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> EventsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> EventsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            EventsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Publish an event to a topic.
        ///
        /// The event will be packed into a timestamp envelope with the namespace
        /// introspected from the context. The envelope will then be dispatched.
        pub async fn publish(
            &mut self,
            request: impl tonic::IntoRequest<super::PublishRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.events.v1.Events/Publish",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.events.v1.Events", "Publish"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Forward sends an event that has already been packaged into an envelope
        /// with a timestamp and namespace.
        ///
        /// This is useful if earlier timestamping is required or when forwarding on
        /// behalf of another component, namespace or publisher.
        pub async fn forward(
            &mut self,
            request: impl tonic::IntoRequest<super::ForwardRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.events.v1.Events/Forward",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.events.v1.Events", "Forward"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Subscribe to a stream of events, possibly returning only that match any
        /// of the provided filters.
        ///
        /// Unlike many other methods in containerd, subscribers will get messages
        /// from all namespaces unless otherwise specified. If this is not desired,
        /// a filter can be provided in the format 'namespace==<namespace>' to
        /// restrict the received events.
        pub async fn subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<crate::compose::containerd::client::types::Envelope>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.events.v1.Events/Subscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.events.v1.Events", "Subscribe"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
