// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrepareSnapshotRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub parent: ::prost::alloc::string::String,
    /// Labels are arbitrary data on snapshots.
    ///
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for PrepareSnapshotRequest {
    const NAME: &'static str = "PrepareSnapshotRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.PrepareSnapshotRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.PrepareSnapshotRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrepareSnapshotResponse {
    #[prost(message, repeated, tag = "1")]
    pub mounts: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
}
impl ::prost::Name for PrepareSnapshotResponse {
    const NAME: &'static str = "PrepareSnapshotResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.PrepareSnapshotResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.PrepareSnapshotResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewSnapshotRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub parent: ::prost::alloc::string::String,
    /// Labels are arbitrary data on snapshots.
    ///
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ViewSnapshotRequest {
    const NAME: &'static str = "ViewSnapshotRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.ViewSnapshotRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.ViewSnapshotRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewSnapshotResponse {
    #[prost(message, repeated, tag = "1")]
    pub mounts: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
}
impl ::prost::Name for ViewSnapshotResponse {
    const NAME: &'static str = "ViewSnapshotResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.ViewSnapshotResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.ViewSnapshotResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MountsRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
}
impl ::prost::Name for MountsRequest {
    const NAME: &'static str = "MountsRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.MountsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.MountsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MountsResponse {
    #[prost(message, repeated, tag = "1")]
    pub mounts: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
}
impl ::prost::Name for MountsResponse {
    const NAME: &'static str = "MountsResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.MountsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.MountsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveSnapshotRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
}
impl ::prost::Name for RemoveSnapshotRequest {
    const NAME: &'static str = "RemoveSnapshotRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.RemoveSnapshotRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.RemoveSnapshotRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitSnapshotRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key: ::prost::alloc::string::String,
    /// Labels are arbitrary data on snapshots.
    ///
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for CommitSnapshotRequest {
    const NAME: &'static str = "CommitSnapshotRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.CommitSnapshotRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.CommitSnapshotRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatSnapshotRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
}
impl ::prost::Name for StatSnapshotRequest {
    const NAME: &'static str = "StatSnapshotRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.StatSnapshotRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.StatSnapshotRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Info {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub parent: ::prost::alloc::string::String,
    #[prost(enumeration = "Kind", tag = "3")]
    pub kind: i32,
    /// CreatedAt provides the time at which the snapshot was created.
    #[prost(message, optional, tag = "4")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// UpdatedAt provides the time the info was last updated.
    #[prost(message, optional, tag = "5")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Labels are arbitrary data on snapshots.
    ///
    /// The combined size of a key/value pair cannot exceed 4096 bytes.
    #[prost(map = "string, string", tag = "6")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for Info {
    const NAME: &'static str = "Info";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.Info".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.Info".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatSnapshotResponse {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<Info>,
}
impl ::prost::Name for StatSnapshotResponse {
    const NAME: &'static str = "StatSnapshotResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.StatSnapshotResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.StatSnapshotResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSnapshotRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub info: ::core::option::Option<Info>,
    /// UpdateMask specifies which fields to perform the update on. If empty,
    /// the operation applies to all fields.
    ///
    /// In info, Name, Parent, Kind, Created are immutable,
    /// other field may be updated using this mask.
    /// If no mask is provided, all mutable field are updated.
    #[prost(message, optional, tag = "3")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
impl ::prost::Name for UpdateSnapshotRequest {
    const NAME: &'static str = "UpdateSnapshotRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.UpdateSnapshotRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.UpdateSnapshotRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSnapshotResponse {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<Info>,
}
impl ::prost::Name for UpdateSnapshotResponse {
    const NAME: &'static str = "UpdateSnapshotResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.UpdateSnapshotResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.UpdateSnapshotResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSnapshotsRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    /// Filters contains one or more filters using the syntax defined in the
    /// containerd filter package.
    ///
    /// The returned result will be those that match any of the provided
    /// filters. Expanded, images that match the following will be
    /// returned:
    ///
    
            /// ```notrust
            /// 	filters[0] or filters[1] or ... or filters[n-1] or filters[n]
            /// ```
    ///
    /// If filters is zero-length or nil, all items will be returned.
    #[prost(string, repeated, tag = "2")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ListSnapshotsRequest {
    const NAME: &'static str = "ListSnapshotsRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.ListSnapshotsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.ListSnapshotsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSnapshotsResponse {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<Info>,
}
impl ::prost::Name for ListSnapshotsResponse {
    const NAME: &'static str = "ListSnapshotsResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.ListSnapshotsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.ListSnapshotsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsageRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
}
impl ::prost::Name for UsageRequest {
    const NAME: &'static str = "UsageRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.UsageRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.UsageRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UsageResponse {
    #[prost(int64, tag = "1")]
    pub size: i64,
    #[prost(int64, tag = "2")]
    pub inodes: i64,
}
impl ::prost::Name for UsageResponse {
    const NAME: &'static str = "UsageResponse";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.UsageResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.UsageResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CleanupRequest {
    #[prost(string, tag = "1")]
    pub snapshotter: ::prost::alloc::string::String,
}
impl ::prost::Name for CleanupRequest {
    const NAME: &'static str = "CleanupRequest";
    const PACKAGE: &'static str = "containerd.services.snapshots.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.snapshots.v1.CleanupRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.snapshots.v1.CleanupRequest".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kind {
    Unknown = 0,
    View = 1,
    Active = 2,
    Committed = 3,
}
impl Kind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::View => "VIEW",
            Self::Active => "ACTIVE",
            Self::Committed => "COMMITTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "VIEW" => Some(Self::View),
            "ACTIVE" => Some(Self::Active),
            "COMMITTED" => Some(Self::Committed),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod snapshots_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Snapshot service manages snapshots
    #[derive(Debug, Clone)]
    pub struct SnapshotsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SnapshotsClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SnapshotsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SnapshotsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SnapshotsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn prepare(
            &mut self,
            request: impl tonic::IntoRequest<super::PrepareSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PrepareSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Prepare",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Prepare",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn view(
            &mut self,
            request: impl tonic::IntoRequest<super::ViewSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ViewSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/View",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.snapshots.v1.Snapshots", "View"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn mounts(
            &mut self,
            request: impl tonic::IntoRequest<super::MountsRequest>,
        ) -> std::result::Result<tonic::Response<super::MountsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Mounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Mounts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn commit(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitSnapshotRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Commit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Commit",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveSnapshotRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Remove",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Remove",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn stat(
            &mut self,
            request: impl tonic::IntoRequest<super::StatSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StatSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Stat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.snapshots.v1.Snapshots", "Stat"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Update",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSnapshotsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ListSnapshotsResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.snapshots.v1.Snapshots", "List"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn usage(
            &mut self,
            request: impl tonic::IntoRequest<super::UsageRequest>,
        ) -> std::result::Result<tonic::Response<super::UsageResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Usage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Usage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn cleanup(
            &mut self,
            request: impl tonic::IntoRequest<super::CleanupRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.snapshots.v1.Snapshots/Cleanup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.snapshots.v1.Snapshots",
                        "Cleanup",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
