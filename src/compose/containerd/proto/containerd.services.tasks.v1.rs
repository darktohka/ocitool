// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTaskRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// RootFS provides the pre-chroot mounts to perform in the shim before
    /// executing the container task.
    ///
    /// These are for mounts that cannot be performed in the user namespace.
    /// Typically, these mounts should be resolved from snapshots specified on
    /// the container object.
    #[prost(message, repeated, tag = "3")]
    pub rootfs: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Mount>,
    #[prost(string, tag = "4")]
    pub stdin: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub stdout: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub stderr: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub terminal: bool,
    #[prost(message, optional, tag = "8")]
    pub checkpoint: ::core::option::Option<crate::compose::containerd::client::types::Descriptor>,
    #[prost(message, optional, tag = "9")]
    pub options: ::core::option::Option<::prost_types::Any>,
    #[prost(string, tag = "10")]
    pub runtime_path: ::prost::alloc::string::String,
}
impl ::prost::Name for CreateTaskRequest {
    const NAME: &'static str = "CreateTaskRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.CreateTaskRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.CreateTaskRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTaskResponse {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
}
impl ::prost::Name for CreateTaskResponse {
    const NAME: &'static str = "CreateTaskResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.CreateTaskResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.CreateTaskResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
}
impl ::prost::Name for StartRequest {
    const NAME: &'static str = "StartRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.StartRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.StartRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartResponse {
    #[prost(uint32, tag = "1")]
    pub pid: u32,
}
impl ::prost::Name for StartResponse {
    const NAME: &'static str = "StartResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.StartResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.StartResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTaskRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DeleteTaskRequest {
    const NAME: &'static str = "DeleteTaskRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.DeleteTaskRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.DeleteTaskRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteResponse {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
    #[prost(uint32, tag = "3")]
    pub exit_status: u32,
    #[prost(message, optional, tag = "4")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for DeleteResponse {
    const NAME: &'static str = "DeleteResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.DeleteResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.DeleteResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteProcessRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DeleteProcessRequest {
    const NAME: &'static str = "DeleteProcessRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.DeleteProcessRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.DeleteProcessRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
}
impl ::prost::Name for GetRequest {
    const NAME: &'static str = "GetRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.GetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.GetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(message, optional, tag = "1")]
    pub process: ::core::option::Option<crate::compose::containerd::client::types::v1::Process>,
}
impl ::prost::Name for GetResponse {
    const NAME: &'static str = "GetResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.GetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.GetResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTasksRequest {
    #[prost(string, tag = "1")]
    pub filter: ::prost::alloc::string::String,
}
impl ::prost::Name for ListTasksRequest {
    const NAME: &'static str = "ListTasksRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ListTasksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ListTasksRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTasksResponse {
    #[prost(message, repeated, tag = "1")]
    pub tasks: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::v1::Process>,
}
impl ::prost::Name for ListTasksResponse {
    const NAME: &'static str = "ListTasksResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ListTasksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ListTasksResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KillRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub signal: u32,
    #[prost(bool, tag = "4")]
    pub all: bool,
}
impl ::prost::Name for KillRequest {
    const NAME: &'static str = "KillRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.KillRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.KillRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecProcessRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub stdin: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub stdout: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub stderr: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub terminal: bool,
    /// Spec for starting a process in the target container.
    ///
    /// For runc, this is a process spec, for example.
    #[prost(message, optional, tag = "6")]
    pub spec: ::core::option::Option<::prost_types::Any>,
    /// id of the exec process
    #[prost(string, tag = "7")]
    pub exec_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ExecProcessRequest {
    const NAME: &'static str = "ExecProcessRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ExecProcessRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ExecProcessRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExecProcessResponse {}
impl ::prost::Name for ExecProcessResponse {
    const NAME: &'static str = "ExecProcessResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ExecProcessResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ExecProcessResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResizePtyRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub width: u32,
    #[prost(uint32, tag = "4")]
    pub height: u32,
}
impl ::prost::Name for ResizePtyRequest {
    const NAME: &'static str = "ResizePtyRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ResizePtyRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ResizePtyRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseIoRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub stdin: bool,
}
impl ::prost::Name for CloseIoRequest {
    const NAME: &'static str = "CloseIORequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.CloseIORequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.CloseIORequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PauseTaskRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for PauseTaskRequest {
    const NAME: &'static str = "PauseTaskRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.PauseTaskRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.PauseTaskRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResumeTaskRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ResumeTaskRequest {
    const NAME: &'static str = "ResumeTaskRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ResumeTaskRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ResumeTaskRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPidsRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ListPidsRequest {
    const NAME: &'static str = "ListPidsRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ListPidsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ListPidsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPidsResponse {
    /// Processes includes the process ID and additional process information
    #[prost(message, repeated, tag = "1")]
    pub processes: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::v1::ProcessInfo>,
}
impl ::prost::Name for ListPidsResponse {
    const NAME: &'static str = "ListPidsResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.ListPidsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.ListPidsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckpointTaskRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub parent_checkpoint: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for CheckpointTaskRequest {
    const NAME: &'static str = "CheckpointTaskRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.CheckpointTaskRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.CheckpointTaskRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckpointTaskResponse {
    #[prost(message, repeated, tag = "1")]
    pub descriptors: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Descriptor>,
}
impl ::prost::Name for CheckpointTaskResponse {
    const NAME: &'static str = "CheckpointTaskResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.CheckpointTaskResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.CheckpointTaskResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTaskRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub resources: ::core::option::Option<::prost_types::Any>,
    #[prost(map = "string, string", tag = "3")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for UpdateTaskRequest {
    const NAME: &'static str = "UpdateTaskRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.UpdateTaskRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.UpdateTaskRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsRequest {
    #[prost(string, repeated, tag = "1")]
    pub filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for MetricsRequest {
    const NAME: &'static str = "MetricsRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.MetricsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.MetricsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsResponse {
    #[prost(message, repeated, tag = "1")]
    pub metrics: ::prost::alloc::vec::Vec<crate::compose::containerd::client::types::Metric>,
}
impl ::prost::Name for MetricsResponse {
    const NAME: &'static str = "MetricsResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.MetricsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.MetricsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WaitRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exec_id: ::prost::alloc::string::String,
}
impl ::prost::Name for WaitRequest {
    const NAME: &'static str = "WaitRequest";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.WaitRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.WaitRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaitResponse {
    #[prost(uint32, tag = "1")]
    pub exit_status: u32,
    #[prost(message, optional, tag = "2")]
    pub exited_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for WaitResponse {
    const NAME: &'static str = "WaitResponse";
    const PACKAGE: &'static str = "containerd.services.tasks.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "containerd.services.tasks.v1.WaitResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/containerd.services.tasks.v1.WaitResponse".into()
    }
}
/// Generated client implementations.
pub mod tasks_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TasksClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TasksClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TasksClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TasksClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TasksClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Create a task.
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Create"));
            self.inner.unary(req, path, codec).await
        }
        /// Start a process.
        pub async fn start(
            &mut self,
            request: impl tonic::IntoRequest<super::StartRequest>,
        ) -> std::result::Result<tonic::Response<super::StartResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Start",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Start"));
            self.inner.unary(req, path, codec).await
        }
        /// Delete a task and on disk state.
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteTaskRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Delete"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_process(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteProcessRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/DeleteProcess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "containerd.services.tasks.v1.Tasks",
                        "DeleteProcess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Get"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListTasksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTasksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "List"));
            self.inner.unary(req, path, codec).await
        }
        /// Kill a task or process.
        pub async fn kill(
            &mut self,
            request: impl tonic::IntoRequest<super::KillRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Kill",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Kill"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn exec(
            &mut self,
            request: impl tonic::IntoRequest<super::ExecProcessRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Exec",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Exec"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn resize_pty(
            &mut self,
            request: impl tonic::IntoRequest<super::ResizePtyRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/ResizePty",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.tasks.v1.Tasks", "ResizePty"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn close_io(
            &mut self,
            request: impl tonic::IntoRequest<super::CloseIoRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/CloseIO",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.tasks.v1.Tasks", "CloseIO"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn pause(
            &mut self,
            request: impl tonic::IntoRequest<super::PauseTaskRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Pause",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Pause"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn resume(
            &mut self,
            request: impl tonic::IntoRequest<super::ResumeTaskRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Resume",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Resume"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_pids(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPidsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListPidsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/ListPids",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.tasks.v1.Tasks", "ListPids"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn checkpoint(
            &mut self,
            request: impl tonic::IntoRequest<super::CheckpointTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckpointTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Checkpoint",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Checkpoint"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateTaskRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Update"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::MetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Metrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Metrics"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn wait(
            &mut self,
            request: impl tonic::IntoRequest<super::WaitRequest>,
        ) -> std::result::Result<tonic::Response<super::WaitResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/containerd.services.tasks.v1.Tasks/Wait",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("containerd.services.tasks.v1.Tasks", "Wait"));
            self.inner.unary(req, path, codec).await
        }
    }
}
